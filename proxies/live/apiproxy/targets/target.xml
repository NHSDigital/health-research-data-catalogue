<TargetEndpoint name="health-research-data-catalogue-target">
  <FaultRules>
    <FaultRule name="invalid_key_rule">
      <Step>
        <Name>RaiseFault.InvalidOrMissingApiKey</Name>
      </Step>
 <!--    <Condition>(oauthV2.VerifyApiKey.FromHeader.failed)</Condition> -->
     <!-- APIM Conditional FaultRule invokes policy -->
    <Condition>(fault.name Equals "FailedToResolveAPIKey") or (fault.name Equals "InvalidApiKey")</Condition>
    </FaultRule>
    <FaultRule name="allow_raisefaults">
      <!-- prevent the DefaultFaultRule from executing when RaiseFault is used in a flow -->
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
        <Condition>(fault.name NotEquals "RaiseFault")</Condition>
        </Step>
      <Condition>(fault.name Equals "RaiseFault")</Condition>
    </FaultRule>
  </FaultRules>
  <PreFlow>
    <Request>
      <!-- EnhancedVerifyApiKey shared flow checks apikeys with no associated products which is missed by Apigee's VerifyApiKey policy. -->
      <Step>
        <Name>FlowCallout.EnhancedVerifyApiKey</Name>
      </Step>
      <!-- VerifyApiKey policy is still needed but set to continueOnError="true" to pass rate limiting info from the app to the
      ApplyRateLimitingApiKey policy in the shared flow. -->
      <Step>
        <Name>VerifyApiKey.FromHeader</Name>
      </Step>
      <!-- DAW-1875-Build1 rate limiting to be handled by shared flow must be after authorization policy -->
      <Step>
        <Name>FlowCallout.ApplyRateLimitingApiKey</Name>
      </Step>      
    </Request>
  </PreFlow>
    <HTTPTargetConnection>
      <Properties>
        <!-- Whitelist the 'expected' error code responses so the responses pass unhindered to caller
          Anything unexpected will be sanitsed by the DefaultFaultRule -
          https://docs.apigee.com/api-platform/fundamentals/fault-handling#customhandlingofhttperrorcodesfromthetargetserver -->
        <Property name="success.codes">1xx,2xx,3xx,404,500,503,504</Property>
      </Properties>
      <SSLInfo>
        <Enabled>true</Enabled>
      </SSLInfo>
      <LoadBalancer>
        <Server name="{{ HRDC_TARGET_SERVER }}" />
      </LoadBalancer>
    </HTTPTargetConnection>
    <DefaultFaultRule>
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
    </DefaultFaultRule>
</TargetEndpoint>